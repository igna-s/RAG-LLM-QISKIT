[
  {
    "output": ""
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 4 | `from qiskit.qasm import Qasm` | * | Deprecation -> `qiskit.qasm` module deprecated | qiskit.qasm | Use `QuantumCircuit.from_qasm_str()` for parsing QASM strings |\n| 5 | `from qiskit.algorithms import VQE` | * | Deprecation -> `qiskit.algorithms.VQE` moved | qiskit.algorithms.VQE | `from qiskit.algorithms.minimum_eigensolvers import VQE` |\n| 6 | `from qiskit import qasm2 as qasm` | * | Deprecation -> `qiskit.qasm` module deprecated (incorrect import) | qiskit.qasm2 | Remove or replace with `QuantumCircuit.from_qasm_str()` for QASM 2 parsing |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 4 | `from qiskit import qasm` | * | Deprecation -> `qiskit.qasm` module deprecated | qiskit.qasm | Use `QuantumCircuit.from_qasm_str()` for parsing QASM strings |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 3 | `from qiskit import QuantumCircuit, qasm, execute` | * | Deprecation -> `qiskit.qasm` module deprecated | qiskit.qasm | Remove `qasm` import. Use `QuantumCircuit.from_qasm_str()` for parsing QASM strings |\n| 3 | `from qiskit import QuantumCircuit, qasm, execute` | * | Deprecation -> `qiskit.execute` function deprecated | qiskit.execute | Remove `execute` import. Use `backend.run()` for executing circuits |\n| 11 | `job = execute(qc, getMyBackend(), shots=1000)` | * | Deprecation -> `qiskit.execute` function deprecated | qiskit.execute | `job = getMyBackend().run(qc, shots=1000)` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 3 | `from qiskit import QuantumCircuit, execute, Aer, qasm` | * | Deprecation -> `qiskit.qasm` module deprecated | qiskit.qasm | Remove `qasm` import. Use `QuantumCircuit.from_qasm_str()` for parsing QASM strings |\n| 3 | `from qiskit import QuantumCircuit, execute, Aer, qasm` | * | Deprecation -> `qiskit.execute` function deprecated | qiskit.execute | Remove `execute` import. Use `backend.run()` for executing circuits |"
  },
  {
    "output": ""
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 11 | `from qiskit import execute` | * | Deprecation -> `qiskit.execute` function deprecated | qiskit.execute | Remove `execute` import. Use `backend.run()` for executing circuits |\n| 12 | `job = execute(qc, backend, shots=1000)` | * | Deprecation -> `qiskit.execute` function deprecated | qiskit.execute | `job = backend.run(qc, shots=1000)` |\n| 16 | `from qiskit.algorithms import VQE` | * | Deprecation -> `qiskit.algorithms.VQE` moved | qiskit.algorithms.VQE | `from qiskit.algorithms.minimum_eigensolvers import VQE` |\n| 18 | `from qiskit import SPSA` | * | Deprecation -> `qiskit.SPSA` moved | qiskit.SPSA | `from qiskit.algorithms.optimizers import SPSA` |"
  },
  {
    "output": ""
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 2 | `from qiskit.opflow import PauliSumOp` | * | Deprecation -> `qiskit.opflow` module deprecated | qiskit.opflow.PauliSumOp | `from qiskit.quantum_info import SparsePauliOp` |\n| 3 | `from qiskit.primitives import BackendEstimator` | * | Deprecation -> `qiskit.primitives.BackendEstimator` deprecated | qiskit.primitives.BackendEstimator | `from qiskit.primitives import Estimator` |\n| 11 | `H1 = PauliSumOp.from_list([(\"II\", 1), (\"IZ\", 2), (\"XI\", 3)])` | * | Deprecation -> `PauliSumOp` usage | PauliSumOp | `H1 = SparsePauliOp.from_list([(\"II\", 1), (\"IZ\", 2), (\"XI\", 3)])` |\n| 14 | `estimator = BackendEstimator(` | * | Deprecation -> `BackendEstimator` class deprecated | BackendEstimator | `estimator = Estimator(` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 1 | `from qiskit import qasm` | * | Deprecation -> `qiskit.qasm` module deprecated | qiskit.qasm | Remove `qasm` import. Use `QuantumCircuit.from_qasm_str()` for parsing QASM strings |\n| 10 | `circuit1 = qasm.Qasm(data=qasm_str)` | * | Deprecation -> `qiskit.qasm.Qasm` class deprecated | qiskit.qasm.Qasm | `qc1 = QuantumCircuit.from_qasm_str(qasm_str)` |\n| 11 | `program1 = circuit1.parse()` | * | Deprecation -> `qiskit.qasm.Qasm.parse` method deprecated | qiskit.qasm.Qasm.parse | (Integrated into previous line) |\n| 12 | `qc1 = program1.get_circuit()` | * | Deprecation -> `qiskit.qasm.Qasm.get_circuit` method deprecated | qiskit.qasm.Qasm.get_circuit | (Integrated into previous line) |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 1 | `from qiskit.qasm import Qasm` | * | Deprecation -> `qiskit.qasm.Qasm` class deprecated | qiskit.qasm.Qasm | Remove `Qasm` import. Use `QuantumCircuit.from_qasm_file()` for parsing QASM files |\n| 4 | `circuit2 = Qasm(filename=qasm_file)` | * | Deprecation -> `qiskit.qasm.Qasm` class deprecated | qiskit.qasm.Qasm | `qc2 = QuantumCircuit.from_qasm_file(qasm_file)` |\n| 5 | `program2 = circuit2.parse()` | * | Deprecation -> `qiskit.qasm.Qasm.parse` method deprecated | qiskit.qasm.Qasm.parse | (Integrated into previous line) |\n| 6 | `qc2 = program2.get_circuit()` | * | Deprecation -> `qiskit.qasm.Qasm.get_circuit` method deprecated | qiskit.qasm.Qasm.get_circuit | (Integrated into previous line) |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 1 | `from qiskit import QuantumCircuit, Aer, execute` | * | Deprecation -> `qiskit.execute` function deprecated | qiskit.execute | Remove `execute` import. Use `backend.run()` for executing circuits |\n| 2 | `from qiskit import qasm2 as qasm` | * | Deprecation -> `qiskit.qasm` module deprecated | qiskit.qasm | Remove `qasm` import. Use `QuantumCircuit.from_qasm_str()` for parsing QASM strings |\n| 10 | `qasm_qc = qasm.Qasm(data=qasm_str)` | * | Deprecation -> `qiskit.qasm.Qasm` class deprecated | qiskit.qasm.Qasm | `circuit = QuantumCircuit.from_qasm_str(qasm_str)` |\n| 11 | `program = qasm_qc.parse()` | * | Deprecation -> `qiskit.qasm.Qasm.parse` method deprecated | qiskit.qasm.Qasm.parse | (Integrated into previous line) |\n| 12 | `circuit = program.get_circuit()` | * | Deprecation -> `qiskit.qasm.Qasm.get_circuit` method deprecated | qiskit.qasm.Qasm.get_circuit | (Integrated into previous line) |\n| 15 | `job = execute(qasm_qc, simulator, shots=1024)` | * | Deprecation -> `qiskit.execute` function deprecated | qiskit.execute | `job = simulator.run(circuit, shots=1024)` |\n| 16 | `counts = result.get_counts(qasm_qc)` | * | Deprecation -> `result.get_counts()` with deprecated object | qiskit.result.Result.get_counts | `counts = result.get_counts(circuit)` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 2 | `from qiskit import qasm2 as qasm` | * | Deprecation -> `qiskit.qasm2` module deprecated | qiskit.qasm2 | Remove `qasm2` import. Use `QuantumCircuit.from_qasm_str()` and `qc.qasm()` for QASM handling. |\n| 10 | `qasm_str = qasm.dumps(qc)` | * | Deprecation -> `qiskit.qasm2.dumps` function deprecated | qiskit.qasm2.dumps | `qasm_str = qc.qasm()` |\n| 11 | `parsed_circuit = qasm.loads(qasm_str)` | * | Deprecation -> `qiskit.qasm2.loads` function deprecated | qiskit.qasm2.loads | `parsed_circuit = QuantumCircuit.from_qasm_str(qasm_str)` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 15 | `result = execute(qc, simulator).result()` | * | Deprecation -> `execute()` function deprecated | execute | `result = simulator.run(qc).result()` |\n| 19 | `job = execute(qc, backend, shots=1000)` | * | Deprecation -> `execute()` function deprecated | execute | `job = backend.run(qc, shots=1000)` |\n| 22 | `counts = job.result().get_counts(qc)` | * | Refactoring -> `result.get_counts()` with circuit object (optional) | result.get_counts | `counts = job.result().get_counts()` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 3 | `from qiskit.tools.events import TextProgressBar` | * | Deprecation -> `qiskit.tools.events` module deprecated | qiskit.tools.events.TextProgressBar | Remove import. Use `qiskit.tools.monitor.job_monitor` for job monitoring. |\n| 11 | `TextProgressBar().update(job)` | * | Deprecation -> `TextProgressBar` class deprecated | qiskit.tools.events.TextProgressBar | `from qiskit.tools.monitor import job_monitor`; `job_monitor(job)` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 2 | `from qiskit.extensions import HGate, XGate, Initialize` | * | Deprecation -> `HGate` and `XGate` can be applied directly as methods | qiskit.extensions.HGate, qiskit.extensions.XGate | Remove `HGate`, `XGate` from import list |\n| 2 | `from qiskit.extensions import HGate, XGate, Initialize` | * | Deprecation -> `Initialize` can be applied directly as a method | qiskit.extensions.Initialize | Remove `Initialize` from import list |\n| 3 | `from qiskit.extensions import Barrier` | * | Deprecation -> `Barrier` can be applied directly as a method | qiskit.extensions.Barrier | Remove `Barrier` from import list |\n| 10 | `qc.append(HGate(), [qr[0]])` | * | Refactoring -> Use direct `QuantumCircuit.h()` method | qiskit.extensions.HGate | `qc.h(qr[0])` |\n| 11 | `qc.append(XGate(), [qr[1]])` | * | Refactoring -> Use direct `QuantumCircuit.x()` method | qiskit.extensions.XGate | `qc.x(qr[1])` |\n| 16 | `init_gate = Initialize(psi)` | * | Refactoring -> Use direct `QuantumCircuit.initialize()` method | qiskit.extensions.Initialize | (Integrated into next line) |\n| 17 | `qc.append(init_gate, [qr[0]])` | * | Refactoring -> Use direct `QuantumCircuit.initialize()` method | qiskit.extensions.Initialize | `qc.initialize(psi, qr[0])` |\n| 19 | `qc.append(Barrier(3), [qr[0], qr[1], qr[2]])` | * | Refactoring -> Use direct `QuantumCircuit.barrier()` method | qiskit.extensions.Barrier | `qc.barrier(qr)` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 4 | `from qiskit import extensions as ext` | * | Deprecation -> `qiskit.extensions` module deprecated for direct gate instantiation | qiskit.extensions | Remove `extensions` import; use direct methods or `qiskit.circuit.library` for specific gates |\n| 10 | `qc.append(HGate(), [qr[0]])` | * | Refactoring -> Use direct `QuantumCircuit.h()` method | HGate | `qc.h(qr[0])` |\n| 11 | `qc.append(XGate(), [qr[1]])` | * | Refactoring -> Use direct `QuantumCircuit.x()` method | XGate | `qc.x(qr[1])` |\n| 20 | `qc.append(ext.Barrier(3), [qr[0], qr[1], qr[2]])` | * | Deprecation -> `qiskit.extensions.Barrier` class deprecated; Refactoring -> Use direct `QuantumCircuit.barrier()` method | qiskit.extensions.Barrier | `qc.barrier(qr)` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 1 | `from qiskit import QuantumCircuit, Aer, execute` | * | Deprecation -> `execute()` function deprecated | execute | Remove `execute` from import list |\n| 19 | `simulator = Aer.get_backend('statevector_simulator')` | * | Deprecation -> `Aer.get_backend()` method deprecated | Aer.get_backend | `from qiskit_aer import AerSimulator`; `simulator = AerSimulator()` |\n| 20 | `result = execute(qc, simulator).result()` | * | Deprecation -> `execute()` function deprecated | execute | `result = simulator.run(qc).result()` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 2 | `from qiskit.extensions import UnitaryGate` | * | Deprecation -> `qiskit.extensions` module for gate imports deprecated | qiskit.extensions.UnitaryGate | `from qiskit.circuit.library import UnitaryGate` |\n| 3 | `from qiskit.extensions.exceptions import ExtensionError` | * | Deprecation -> `qiskit.extensions.exceptions` module deprecated | qiskit.extensions.exceptions.ExtensionError | `from qiskit.exceptions import QiskitError` |\n| 9 | `raise ExtensionError(\"La matriz debe ser cuadrada\")` | * | Deprecation -> `ExtensionError` exception deprecated | ExtensionError | `raise QiskitError(\"La matriz debe ser cuadrada\")` |\n| 13 | `except ExtensionError as e:` | * | Deprecation -> `ExtensionError` exception deprecated | ExtensionError | `except QiskitError as e:` |"
  },
  {
    "output": ""
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 8 | `pulse.u2(0, math.pi, 0)` | * | Deprecation -> `pulse.u2()` instruction deprecated, use `pulse.u()` instead | qiskit.pulse.u2 | `pulse.u(math.pi/2, 0, math.pi, 0)` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 2 | `from qiskit.test.mock import FakeVigo` | * | Deprecation -> `qiskit.test.mock` module deprecated | qiskit.test.mock | `from qiskit.providers.fake_provider import FakeVigo` |\n| 3 | `from qiskit.test.reference_circuits import ReferenceCircuits` | * | Deprecation -> `qiskit.test.reference_circuits` module deprecated | qiskit.test.reference_circuits | `from qiskit import QuantumCircuit` |\n| 5 | `qc = ReferenceCircuits.bell()` | * | Deprecation -> `ReferenceCircuits.bell()` method deprecated | ReferenceCircuits.bell | `qc = QuantumCircuit(2, 2); qc.h(0); qc.cx(0, 1)` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 1 | `from qiskit import execute` | * | Deprecation -> `execute` function deprecated | qiskit.execute | (optional) `job = backend.run(qc, shots=1024)` |\n| 2 | `from qiskit.test.mock import FakeVigo` | * | Deprecation -> `qiskit.test.mock` module deprecated | qiskit.test.mock | `from qiskit.providers.fake_provider import FakeVigo` |\n| 3 | `from qiskit.test.reference_circuits import ReferenceCircuits` | * | Deprecation -> `qiskit.test.reference_circuits` module deprecated | qiskit.test.reference_circuits | `from qiskit import QuantumCircuit` |\n| 4 | `from qiskit.test.base import BaseTestCase` | * | Deprecation -> `qiskit.test.base` module deprecated | qiskit.test.base | `from unittest import TestCase` |\n| 7 | `qc = ReferenceCircuits.bell()` | * | Deprecation -> `ReferenceCircuits.bell()` method deprecated | ReferenceCircuits.bell | `qc = QuantumCircuit(2, 2); qc.h(0); qc.cx(0, 1)` |\n| 9 | `job = execute(qc, backend, shots=1024)` | * | Deprecation -> `execute` function deprecated | qiskit.execute | (optional) `job = backend.run(qc, shots=1024)` |\n| 16 | `class TestBellCircuit(BaseTestCase):` | * | Deprecation -> `BaseTestCase` deprecated | BaseTestCase | `class TestBellCircuit(TestCase):` |\n| 19 | `qc = ReferenceCircuits.bell()` | * | Deprecation -> `ReferenceCircuits.bell()` method deprecated | ReferenceCircuits.bell | `qc = QuantumCircuit(2, 2); qc.h(0); qc.cx(0, 1)` |\n| 21 | `job = execute(qc, backend, shots=1024)` | * | Deprecation -> `execute` function deprecated | qiskit.execute | (optional) `job = backend.run(qc, shots=1024)` |"
  },
  {
    "output": "| Line | Code | Scenario Id | Scenario | Artifact | Refactoring |\n| :-: | :- | :-: | :- | :- | :- |\n| 2 | `from qiskit.utils import QuantumInstance, algorithm_globals` | * | Deprecation -> `QuantumInstance` class deprecated | qiskit.utils.QuantumInstance | `from qiskit.primitives import Estimator` |\n| 2 | `from qiskit.utils import QuantumInstance, algorithm_globals` | * | Deprecation -> `algorithm_globals` deprecated, replace with `numpy.random` and explicit seeds | qiskit.utils.algorithm_globals | |\n| 4 | `from qiskit.opflow import Z, I, X` | * | Deprecation -> `qiskit.opflow` module deprecated | qiskit.opflow | `from qiskit.quantum_info import SparsePauliOp` |\n| 7 | `hamiltonian = (Z ^ I) + (X ^ X)` | * | Deprecation -> `opflow` operators and classes deprecated | qiskit.opflow.Z | `hamiltonian = SparsePauliOp.from_list([('ZI', 1), ('XX', 1)])` |\n| 7 | `hamiltonian = (Z ^ I) + (X ^ X)` | * | Deprecation -> `opflow` operators and classes deprecated | qiskit.opflow.I | `hamiltonian = SparsePauliOp.from_list([('ZI', 1), ('XX', 1)])` |\n| 7 | `hamiltonian = (Z ^ I) + (X ^ X)` | * | Deprecation -> `opflow` operators and classes deprecated | qiskit.opflow.X | `hamiltonian = SparsePauliOp.from_list([('ZI', 1), ('XX', 1)])` |\n| 10 | `initial_point = algorithm_globals.random.random(ansatz.num_parameters)` | * | Deprecation -> `algorithm_globals.random` deprecated, use `numpy.random` | qiskit.utils.algorithm_globals.random | `rng = np.random.default_rng(seed=1234); initial_point = rng.random(ansatz.num_parameters)` |\n| 13 | `quantum_instance = QuantumInstance(` | * | Deprecation -> `QuantumInstance` class deprecated, use `Estimator` | qiskit.utils.QuantumInstance | `estimator = Estimator(` |\n| 16 | `seed_simulator=algorithm_globals.random_seed,` | * | Deprecation -> `algorithm_globals.random_seed` deprecated, define seed explicitly | qiskit.utils.algorithm_globals.random_seed | `seed_simulator=1234,` |\n| 17 | `seed_transpiler=algorithm_globals.random_seed` | * | Deprecation -> `algorithm_globals.random_seed` deprecated, define seed explicitly | qiskit.utils.algorithm_globals.random_seed | `seed_transpiler=1234` |"
  }
]